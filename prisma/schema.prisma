generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Adding the opposite relation
  orders    Order[]  // A user can have multiple orders
}

enum OrderType {
  in_place
  delivery
}

model Order {
  id              Int       @id @default(autoincrement())
  tableId         Int?      // Nullable because it might not be needed for delivery orders
  userId          Int
  total           Float
  status          String    // Example: 'pending', 'in-progress', 'completed'
  orderType       OrderType
  deliveryAddress String?   // Nullable, only for delivery orders
  deliveryTime    DateTime? // Nullable, only for delivery orders
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  table           Table?    @relation(fields: [tableId], references: [id], onDelete: SetNull)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  invoice         Invoice?  // Add this line to establish the one-to-one relation
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  menuItemId  Int
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  order       Order     @relation(fields: [orderId], references: [id])
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
}

model MenuItem {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  available   Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orderItems    OrderItem[]
}

model Table {
  id        Int      @id @default(autoincrement())
  number    Int
  seats     Int
  orders    Order[]
  status    String   @default("Free") // Possible values: Free, Occupied, Reserved
}

model Invoice {
  id             Int      @id @default(autoincrement())
  orderId        Int      @unique
  billingName    String
  billingAddress String
  billingEmail   String
  billingPhone   String
  totalAmount    Float
  status         String   // Example: 'unpaid', 'paid', 'canceled'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationship
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
